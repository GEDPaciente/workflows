name: 'üéõÔ∏è Atualiza√ß√£o de Modulos'
description: 'Fluxo de atualiza√ß√£o do Modulo'
inputs:
  branch_name:
    description: 'Branch para commitar nos projetos e workspace'
    required: false
    default: develop
  version:
    description: 'Vers√£o para atualizar'
    required: true
  version_semantic:
    description: 'Vers√£o para atualizar semantica'
    required: true
  github_token:
    description: 'Token de acesso ao Github'
    required: true
runs:
  using: 'composite'
  steps:
    - name: üîí Verificar GitHub Token
      run: |
        if [ -z "${{ inputs.github_token }}" ]; then
          echo "GitHub Token n√£o fornecido."
          exit 1
        else
          echo "GitHub Token est√° presente."
        fi
      shell: bash

    - name: üöö Atualizando projeto
      uses: actions/checkout@v3
      with:
        repository: GEDPaciente/mv-ged-workspace
        token: ${{ inputs.github_token }}
        ref: ${{ inputs.branch_name }}

    - name: Clona submodulos
      run: |
        git config --global url."https://x-access-token:${MY_GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
        git submodule update --init --recursive
        git submodule foreach '
          git checkout $branch_name
          git fetch --all
          git pull
        '
      env:
        MY_GITHUB_TOKEN: ${{ inputs.github_token }}
        branch_name: ${{ inputs.branch_name }}
      shell: bash
        
    - name: üìù Apresenta a branch atual de cada subm√≥dulo
      run: |
        echo "Apresentando a branch atual de cada subm√≥dulo"
        git submodule foreach '
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Subm√≥dulo: $name, Branch atual: $CURRENT_BRANCH"
        '
      shell: bash

    - name: üìù Atualiza a vers√£o no pom.xml
      run: |
        echo "Atualizando vers√£o no pom.xml"
        mvn versions:set -DnewVersion=${{ inputs.version }} -DgenerateBackupPoms=false
      shell: bash

    - name: üìù Atualiza vers√£o do package.json do mv-ged-ui
      run: |
        echo "Atualizando vers√£o no package.json"
        cd mv-ged-ui
        cp package.json package.json.bak
        jq '.version = "${{ inputs.version }}"' package.json.bak > package.json
        rm package.json.bak
        cd ..
      shell: bash

    - name: Apresenta nova vers√£o
      run: |
        ACTUAL_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Nova vers√£o do projeto: $ACTUAL_VERSION"
      shell: bash

    - name: Configura GIT
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
      shell: bash

    - name: üìù Commita a nova vers√£o em cada um dos M√≥dulos
      run: |
        echo "Commitando a nova vers√£o em cada subm√≥dulo"
        git submodule foreach '
          echo "Atualizando subm√≥dulo $name"
          git checkout $BRANCH
          git pull origin $BRANCH
          if [ -f package.json ]; then
            git add package.json
          fi
          git add pom.xml
          echo "Diferen√ßas no subm√≥dulo $name:"
          git diff --cached
          if git diff-index --quiet HEAD --; then
            echo "Nada a commitar em $name"
          else
            git commit -m "Atualizando vers√£o do projeto para $VERSION_SEMANTIC"
            git push origin HEAD:$BRANCH
          fi
        '
      shell: bash
      env:
        VERSION_SEMANTIC: ${{ inputs.version_semantic }}
        BRANCH: ${{ github.head_ref || github.ref_name }}

    - name: üìù Commita a nova vers√£o no workspace
      run: |
        echo "Commitando a nova vers√£o no workspace"
        git add pom.xml
        for submodule in $(git submodule --quiet foreach 'echo $sm_path'); do
          if [ -n "$(git -C $submodule status --porcelain)" ]; then
            git add $submodule
          fi
        done
        git commit -m "Atualizando vers√£o do projeto e apontamentos dos subm√≥dulos para $VERSION_SEMANTIC"
        git push origin HEAD:$BRANCH
      shell: bash
      env:
        VERSION_SEMANTIC: ${{ inputs.version_semantic }}
        BRANCH: ${{ github.head_ref || github.ref_name }}
