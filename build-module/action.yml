name: 'üéõÔ∏è Build Modulo'
description: 'Fluxo de atualiza√ß√£o do Modulo'
inputs:
  github_token:
    description: 'Token de acesso ao GitHub'
    required: true
outputs:
  module_version:
    description: 'Vers√£o do Modulo'
    value: ${{ steps.get_version.outputs.version }}
  core_version:
    description: 'Vers√£o do GED-CORE'
    value: ${{ steps.build-core.outputs.core_version }}
  gap_core_version:
    description: 'Vers√£o do GAP-CORE'
    value: ${{ steps.build-core.outputs.gap_core_version }}
runs:
  using: 'composite'
  steps:
    - name: üîí Verificar GitHub Token
      run: |
        if [ -z "${{ inputs.github_token }}" ]; then
          echo "GitHub Token n√£o fornecido."
          exit 1
        else
          echo "GitHub Token est√° presente."
        fi
      shell: bash

    - name: 'Build Core'
      id: build-core
      uses: GEDPaciente/workflows/build-core@main
      with:
        github_token: ${{ inputs.github_token }}

    - name: 'Finalizado build core'
      run: |
        echo "Core Buildado, iniciando clonagem do modulo"
      shell: bash

    - name: üöö Atualizando projeto
      uses: actions/checkout@v3
      with:
        path: module

    - name: Pull Project
      run: |
        cd module
        git pull
      shell: bash

    - name: 'Set up JDK 17'
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '17'
    
    - name: 'Verificar vers√£o'
      id: get_version
      run: |
        cd module
        echo "Obtendo vers√£o do modulo"
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression="project.version" -q -DforceStdout)
        echo "Vers√£o do Modulo: $CURRENT_VERSION"
        echo "module_version=$CURRENT_VERSION" >> $GITHUB_ENV
      shell: bash   

    - name: 'Obtem vers√£o atual do core no projeto'
      run: |
        cd module
        echo "Obtendo valores de vers√£o do core para compara√ß√£o"
        VERSION=$(mvn help:evaluate -Dexpression="ged.core.version" -q -DforceStdout)
        VERSION_GAP=$(mvn help:evaluate -Dexpression="ged.auth.core.version" -q -DforceStdout)
        EMPTY_STRING="null object or invalid expression"

        if [ "$VERSION" == "$EMPTY_STRING" ]; then
          VERSION=""
        fi

        if [ "$VERSION_GAP" == "$EMPTY_STRING" ]; then
          VERSION_GAP=""
        fi
      

        if [ -z "$VERSION" ] && [ -z "$VERSION_GAP" ]; then
          echo "Projeto n√£o possui depend√™ncia do GED CORE ou GED AUTH CORE"
          exit 1
        fi

        echo "Vers√£o do GED CORE: $VERSION"
        echo "Vers√£o do GED AUTH CORE: $VERSION_GAP"

        if [ "$VERSION" == "$core_version" ] && [ ! -z "$VERSION" ]; then
          echo "Vers√£o do GED CORE j√° √© $core_version. Nenhuma atualiza√ß√£o necess√°ria."
        else
          echo "commit_core=true" >> $GITHUB_ENV
          echo "Vers√£o do GED CORE diferente da vers√£o atual do modulo"
        fi

        if [ "$VERSION_GAP" == "$gap_core_version" ] && [ ! -z "$VERSION_GAP" ]; then
          echo "Vers√£o do GED AUTH CORE j√° √© $gap_core_version. Nenhuma atualiza√ß√£o necess√°ria."
        else
          echo "commit_gap_core=true" >> $GITHUB_ENV
          echo "Vers√£o do GED AUTH CORE diferente da vers√£o atual do modulo"
        fi

        echo "Fim da Compara√ß√£o"

        echo "atual_core_version=$VERSION" >> $GITHUB_ENV
        echo "atual_gap_version=$VERSION_GAP" >> $GITHUB_ENV
      shell: bash

    - name: 'Altera vers√£o do GED CORE do modulo'
      if: env.commit_core == 'true'
      run: |
        cd module
        echo "Atualizando vers√£o do GED CORE para $core_version"
        mvn versions:set-property -Dproperty="ged.core.version" -DnewVersion="$core_version" -DgenerateBackupPoms=false -q
        echo "Vers√£o do GED CORE do Modulo foi atualizada"
      shell: bash

    - name: Commit
      if: env.commit_core == 'true'
      run: |
        cd module
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add pom.xml
        git commit -m "Atualiza√ß√£o de CORE - v$core_version"
      shell: bash

    - name: 'Altera vers√£o do GED AUTH CORE do modulo'
      if: env.commit_gap_core == 'true'
      run: |
        cd module
        echo "Atualizando vers√£o do GED AUTH CORE para $core_version"
        mvn versions:set-property -Dproperty="ged.auth.core.version" -DnewVersion="$gap_core_version" -DgenerateBackupPoms=false -q
        echo "Vers√£o do GED AUTH CORE do Modulo foi atualizada"
      shell: bash

    - name: Commit
      if: env.commit_gap_core == 'true'
      run: |
        cd module
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add pom.xml
        git commit -m "Atualiza√ß√£o de GAP CORE - v$core_version"
      shell: bash

    - name: 'Build'
      run: |
        cd module
        echo "Iniciando build do modulo"
        mvn clean install -N -q
        echo "Modulo Buildado"
      shell: bash

    - name: Push
      if: env.commit_gap_core == 'true' || env.commit_core == 'true'
      run: |
        cd module
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git push
      shell: bash
    
