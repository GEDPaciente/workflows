name: 'üéõÔ∏è Atualizar Vers√£o'
description: 'Atualiza a vers√£o do modulo e realiza um commit.'
inputs:
  version:
    description: 'Nova vers√£o para ser definida no modulo.'
    required: true
  github_token:
    description: 'Token para clonar workspace'
    required: true 
runs:
  using: 'composite'
  steps:
    - name: 'Build Core'
      id: build-core
      uses: GEDPaciente/workflows/build-core@main
      with:
        github_token: ${{ inputs.github_token }}

    - name: 'Finalizado build core'
      run: |
        echo "Core Buildado, iniciando clonagem do modulo"
      shell: bash
      
    - name: 'Checkout Repository'
      uses: actions/checkout@v3
      with:
        path: module
        
    - name: 'Set up JDK 17'
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '17'
        
    - name: 'Build'
      run: |
        cd module
        echo "Buildando modulo"
        mvn clean install -N -q
        echo "Modulo Buildado"
      shell: bash

    - name: Verificar vers√£o
      run: |
        cd module
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Vers√£o atual: $CURRENT_VERSION"
        if [ "$CURRENT_VERSION" == "${{ inputs.version }}" ]; then
          echo "Vers√£o atual j√° √© $CURRENT_VERSION. Nenhuma atualiza√ß√£o necess√°ria."
          echo "skip_commit=true" >> $GITHUB_ENV
        fi
      shell: bash

    - name: üìù Update Version
      if: env.skip_commit != 'true'
      run: |
        cd module
        echo "Atualizando vers√£o para $TO_VERSION"
        mvn versions:set -DnewVersion="$TO_VERSION" -DgenerateBackupPoms=false -q
        
        if [ -f package.json ]; then
          echo "Atualizando vers√£o no package.json"
          jq --arg version "${{ inputs.version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
        fi
      shell: bash
      env: 
        TO_VERSION: inputs.version 

    - name: Commit
      if: env.skip_commit != 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add pom.xml
        
        if [ -f package.json ]; then
          git add package.json
        fi

        VERSION_SEMANTIC=v$VERSION
        
        git commit -m "Atualiza√ß√£o de Vers√£o - $VERSION_SEMANTIC"
        git push
        echo "Vers√£o atualizada para $VERSION"
      shell: bash
      env:
        VERSION: ${{ inputs.version }}
