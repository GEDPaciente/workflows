name: 'üéõÔ∏è Atualizar Vers√£o'
description: 'Atualiza a vers√£o do m√≥dulo e realiza um commit.'
inputs:
  version:
    description: 'Nova vers√£o para ser definida no m√≥dulo.'
    required: true
  github_token:
    description: 'Token para clonar workspace'
    required: true 
runs:
  using: 'composite'
  steps:
    - name: üîí Verificar GitHub Token
      run: |
        if [ -z "${{ inputs.github_token }}" ]; then
          echo "GitHub Token n√£o fornecido."
          exit 1
        else
          echo "GitHub Token est√° presente."
        fi
      shell: bash

    - name: 'Configurar Credenciais para Subm√≥dulos'
      run: |
        git config --global url."https://${{ inputs.github_token }}@github.com/".insteadOf "https://github.com/"
      shell: bash

    - name: 'Set up JDK 17'
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: 'Obter o nome do reposit√≥rio que disparou a a√ß√£o'
      run: |
        REPO_NAME=$(basename "${{ github.repository }}")
        echo "O nome do reposit√≥rio que disparou a action √©: $REPO_NAME"
        echo "repo_name=$REPO_NAME" >> $GITHUB_ENV
      shell: bash

    - name: 'Checkout Reposit√≥rio Parent na Mesma Ref'
      uses: actions/checkout@v3
      with:
        repository: GEDPaciente/mv-ged-parent
        token: ${{ inputs.github_token }}
        ref: ${{ github.ref }}
        path: parent

    - name: 'Atualizar e Inicializar Subm√≥dulos'
      run: |
        cd parent
        git submodule update --init --recursive
        git submodule foreach git fetch origin
        git submodule foreach git pull origin ${{ github.ref_name }}
        cd ..
      shell: bash

    - name: Build do Parent, Cores e Subm√≥dulo Espec√≠fico
      id: build-only-modules
      run: |
        cd parent
        if [[ ! "$GITHUB_REPOSITORY" == "GEDPaciente/mv-ged-core" && ! "$GITHUB_REPOSITORY" == "GEDPaciente/mv-gap-core" ]]; then
          echo "Buildando cores e ${{env.repo_name}}"
          mvn clean package -pl mv-ged-core,mv-gap-core,${{ env.repo_name }} -am -DskipTests -q
        else
            if [[ "$GITHUB_REPOSITORY" == "GEDPaciente/mv-ged-core" ]]; then
              echo "Buildando somente GED-CORE"
              mvn clean package -pl mv-ged-core -DskipTests -q
            elif [[ "$GITHUB_REPOSITORY" == "GEDPaciente/mv-gap-core" ]]; then
              echo "Buildando somente GAP-CORE"
              mvn clean package -pl mv-gap-core -DskipTests -q
            fi
        fi

        echo "Build COMPLETO! ${{ env.repo_name }}"
        
      shell: bash

    - name: 'Copiar Arquivos'
      run: |
        
        mkdir -p core/target
        
        if [[ -d "parent/mv-ged-core/target" ]]; then
          cp parent/mv-ged-core/target/*.jar core/target/
          echo "JAR GED-CORE copiado para core/target"
        fi

        if [[ -d "parent/mv-gap-core/target" ]]; then        
          cp parent/mv-gap-core/target/*.jar core/target/
          echo "JAR GAP-CORE copiado para core/target"
        fi        

        ln -s "parent/${{ env.repo_name }}" module
        echo "Symlink criado para a pasta do reposit√≥rio em 'module'"

      shell: bash

    - name: 'Verificar vers√£o do m√≥dulo'
      run: |
        cd module

        pwd

        tree

        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Vers√£o atual: $CURRENT_VERSION"
        if [ "$CURRENT_VERSION" == "${{ inputs.version }}" ]; then
          echo "Vers√£o atual j√° √© $CURRENT_VERSION. Nenhuma atualiza√ß√£o necess√°ria."
          echo "skip_commit=true" >> $GITHUB_ENV
        fi
        echo "module_version=$CURRENT_VERSION" >> $GITHUB_ENV
      shell: bash

    - name: üìù Atualizar vers√£o
      if: env.skip_commit != 'true'
      run: |
        cd module
        echo "Atualizando vers√£o para ${{ inputs.version }}"
        mvn versions:set -DnewVersion="${{ inputs.version }}" -DgenerateBackupPoms=false -q

        if [ -f package.json ]; then
          echo "Atualizando vers√£o no package.json para ${{ inputs.version }}"
          jq --arg version "${{ inputs.version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
        fi
      shell: bash

    - name: üõ†Ô∏è Atualizar vers√£o do CORE no Parent
      if: env.skip_commit != 'true' && (github.repository == 'GEDPaciente/mv-ged-core' || github.repository == 'GEDPaciente/mv-gap-core')
      run: |
        cd module
        if [[ "$GITHUB_REPOSITORY" == "GEDPaciente/mv-ged-core" ]]; then
          PROPERTY_NAME="ged.core.version"
        elif [[ "$GITHUB_REPOSITORY" == "GEDPaciente/mv-gap-core" ]]; then
          PROPERTY_NAME="ged.auth.core.version"
        else
          exit 0
        fi

        # Salvar a propriedade em uma vari√°vel de ambiente
        echo "PROPERTY_NAME=$PROPERTY_NAME" >> $GITHUB_ENV

        cd ..
        mvn versions:set-property -Dproperty=$PROPERTY_NAME -DnewVersion="${{ inputs.version }}"
        git add pom.xml
        git commit -m "Atualiza vers√£o do $PROPERTY_NAME para ${{ inputs.version }}"
        git push
      shell: bash

    - name: Commit
      if: env.skip_commit != 'true'
      run: |
        cd module
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pom.xml

        if [ -f package.json ]; then
          git add package.json
        fi

        VERSION_SEMANTIC=v${{ inputs.version }}
        git commit -m "Atualiza√ß√£o da vers√£o na propriedade $PROPERTY_NAME - $VERSION_SEMANTIC"
        git push
        echo "Vers√£o atualizada para $module_version"
      shell: bash