name: 'üéõÔ∏è Atualizar Vers√£o'
description: 'Atualiza a vers√£o do m√≥dulo e realiza um commit.'
inputs:
  version:
    description: 'Nova vers√£o para ser definida no m√≥dulo.'
    required: true
  github_token:
    description: 'Token para clonar workspace'
    required: true 
runs:
  using: 'composite'
  steps:

    - name: Baixar o artefato
        uses: actions/download-artifact@v3
        with:
          name: module
          
    - name: 'Verificar vers√£o do m√≥dulo'
      run: |
        cd module
        ls -la
        exit 1
      shell: bash

    - name: 'Verificar vers√£o do m√≥dulo'
      run: |
        cd module
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Vers√£o atual: $CURRENT_VERSION"
        if [ "$CURRENT_VERSION" == "${{ inputs.version }}" ]; then
          echo "Vers√£o atual j√° √© $CURRENT_VERSION. Nenhuma atualiza√ß√£o necess√°ria."
          echo "skip_commit=true" >> $GITHUB_ENV
        fi
        echo "module_version=$CURRENT_VERSION" >> $GITHUB_ENV
      shell: bash

    - name: üìù Atualizar vers√£o
      if: env.skip_commit != 'true'
      run: |
        cd module
        echo "Atualizando vers√£o para ${{ inputs.version }}"
        mvn versions:set -DnewVersion="${{ inputs.version }}" -DgenerateBackupPoms=false -q

        if [ -f package.json ]; then
          echo "Atualizando vers√£o no package.json para ${{ inputs.version }}"
          jq --arg version "${{ inputs.version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
        fi
      shell: bash

    - name: üõ†Ô∏è Atualizar vers√£o do CORE no Parent
      if: env.skip_commit != 'true' && (github.repository == 'GEDPaciente/mv-ged-core' || github.repository == 'GEDPaciente/mv-gap-core')
      run: |
        cd module
        if [[ "$GITHUB_REPOSITORY" == "GEDPaciente/core" ]]; then
          PROPERTY_NAME="ged.core.version"
        elif [[ "$GITHUB_REPOSITORY" == "GEDPaciente/mv-gap-core" ]]; then
          PROPERTY_NAME="ged.auth.core.version"
        else
          exit 0
        fi

        # Salvar a propriedade em uma vari√°vel de ambiente
        echo "PROPERTY_NAME=$PROPERTY_NAME" >> $GITHUB_ENV

        cd ..
        mvn versions:set-property -Dproperty=$PROPERTY_NAME -DnewVersion="${{ inputs.version }}"
        git add pom.xml
        git commit -m "Atualiza vers√£o do $PROPERTY_NAME para ${{ inputs.version }}"
        git push
      shell: bash

    - name: Commit
      if: env.skip_commit != 'true'
      run: |
        cd module
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pom.xml

        if [ -f package.json ]; then
          git add package.json
        fi

        VERSION_SEMANTIC=v${{ inputs.version }}
        git commit -m "Atualiza√ß√£o da vers√£o na propriedade $PROPERTY_NAME - $VERSION_SEMANTIC"
        git push
        echo "Vers√£o atualizada para $module_version"
      shell: bash